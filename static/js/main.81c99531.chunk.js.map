{"version":3,"sources":["components/InputFields/InputFields.js","components/ResultsTable/ResultsTable.js","App.js","reportWebVitals.js","index.js"],"names":["InputFields","_ref","initialValues","onInputChange","React","createElement","TextField","label","type","variant","value","initialAmount","onChange","e","target","fullWidth","margin","monthlyDeposit","helperText","interestRate","ResultsTable","results","map","result","index","key","year","startingAmount","toFixed","interestEarned","totalAmount","theme","createTheme","typography","fontFamily","App","_useState","useState","_useState2","_slicedToArray","setInitialValues","_useState3","_useState4","setResults","ThemeProvider","CssBaseline","className","Typography","gutterBottom","field","prevValues","_objectSpread","_defineProperty","parseFloat","Button","onClick","calculatedResults","years","push","calculateResults","color","length","Fragment","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.81c99531.chunk.js","sourcesContent":["// InputFields.js\r\nimport React from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\nconst InputFields = ({ initialValues, onInputChange }) => {\r\n  return (\r\n    <div>\r\n      <TextField\r\n        label=\"Initial Amount\"\r\n        type=\"text\"\r\n        variant=\"outlined\"\r\n        value={initialValues.initialAmount}\r\n        onChange={(e) => onInputChange('initialAmount', e.target.value)}\r\n        fullWidth\r\n        margin=\"normal\"\r\n      />\r\n      <TextField\r\n        label=\"Monthly Deposit\"\r\n        type=\"text\"\r\n        variant=\"outlined\"\r\n        value={initialValues.monthlyDeposit}\r\n        onChange={(e) => onInputChange('monthlyDeposit', e.target.value)}\r\n        fullWidth\r\n        margin=\"normal\"\r\n        helperText=\"Enter the monthly deposit\"\r\n      />\r\n      <TextField\r\n        label=\"Interest Rate (%)\"\r\n        type=\"text\"\r\n        variant=\"outlined\"\r\n        value={initialValues.interestRate}\r\n        onChange={(e) => onInputChange('interestRate', e.target.value)}\r\n        fullWidth\r\n        margin=\"normal\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputFields;\r\n","// ResultsTable.js\r\nimport React from 'react';\r\n\r\nconst ResultsTable = ({ results }) => {\r\n  return (\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>Year</th>\r\n          <th>Starting Amount</th>\r\n          <th>Yearly Deposit</th>\r\n          <th>Interest Rate (%)</th>\r\n          <th>Interest Earned</th>\r\n          <th>Total Amount</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {results.map((result, index) => (\r\n          <tr key={index}>\r\n            <td>{result.year}</td>\r\n            <td>{result.startingAmount.toFixed(2)}</td>\r\n            <td>{result.monthlyDeposit.toFixed(2)}</td>\r\n            <td>{result.interestRate.toFixed(2)}</td>\r\n            <td>{result.interestEarned.toFixed(2)}</td>\r\n            <td>{result.totalAmount.toFixed(2)}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\n\r\nexport default ResultsTable;\r\n\r\n","// App.js\nimport React, { useState } from 'react';\nimport InputFields from './components/InputFields/InputFields';\nimport ResultsTable from './components/ResultsTable/ResultsTable';\nimport { CssBaseline, ThemeProvider, createTheme, Button, Typography } from '@mui/material';\nimport './App.css'; // Import styles.css\nimport './styles.css';\n\n// Create a custom Material-UI theme\nconst theme = createTheme({\n  typography: {\n    fontFamily: 'Roboto, sans-serif', // Use your chosen font\n  },\n});\n\n\n// Calculation logic function\nconst calculateResults = (initialAmount, monthlyDeposit, interestRate, years) => {\n  const results = [];\n\n  let totalAmount = initialAmount;\n  for (let year = 1; year <= years; year++) {\n    const interestEarned = (totalAmount * interestRate) / 100 ; // Monthly interest\n    totalAmount += monthlyDeposit * 12 + interestEarned;\n\n    results.push({\n      year,\n      startingAmount: totalAmount - (monthlyDeposit * 12 + interestEarned),\n      monthlyDeposit: monthlyDeposit*12,\n      interestRate,\n      interestEarned,\n      totalAmount,\n    });\n  }\n\n  return results;\n};\n\nconst App = () => {\n  const [initialValues, setInitialValues] = useState({\n    initialAmount: 1000,\n    monthlyDeposit : 100,\n    interestRate: 7,\n  });\n\n  // Event handler for input changes\n  const handleInputChange = (field, value) => {\n    setInitialValues((prevValues) => ({\n      ...prevValues,\n      [field]: parseFloat(value), // Convert to float if needed\n    }));\n  };\n\n  const [results, setResults] = useState([]);\n\n  const handleCalculate = () => {\n    const calculatedResults = calculateResults(\n      initialValues.initialAmount,\n      initialValues.monthlyDeposit ,\n      initialValues.interestRate,\n      50 // Number of years you want to calculate\n    );\n    setResults(calculatedResults);\n  };\n\n\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div className=\"App\">\n        <div className=\"app-container\">\n          <Typography variant=\"h2\" gutterBottom className=\"title\">\n            Financial Freedom Calculator\n          </Typography>\n          <InputFields initialValues={initialValues} onInputChange={handleInputChange} />\n          <Button variant=\"contained\" onClick={handleCalculate} color=\"primary\">\n            Calculate\n          </Button>\n          {results.length > 0 && (\n            <>\n              <ResultsTable results={results} />\n            </>\n          )}\n        </div>\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}