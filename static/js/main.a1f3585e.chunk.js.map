{"version":3,"sources":["components/InputFields/InputFields.js","components/ResultsTable/ResultsTable.js","components/MyFooter.js","App.js","reportWebVitals.js","index.js"],"names":["InputFields","_ref","initialValues","onInputChange","handleInputChange","fieldName","value","numericValue","parseFloat","sanitizedValue","isNaN","React","createElement","TextField","label","type","variant","initialAmount","onChange","e","target","fullWidth","margin","monthlyDeposit","helperText","interestRate","targetMonthlyInterestEarned","ResultsTable","results","map","result","index","key","className","highlight","year","startingAmount","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","toFixed","interestEarned","monthlyInterestEarned","totalAmount","Footer","Typography","color","align","Date","getFullYear","theme","createTheme","typography","fontFamily","App","_useState","useState","_useState2","_slicedToArray","setInitialValues","_useState3","_useState4","setResults","ThemeProvider","CssBaseline","gutterBottom","field","prevValues","_objectSpread","_defineProperty","Button","onClick","calculatedResults","years","isTargetAchieved","push","calculateResults","firstTargetAchievedIndex","findIndex","length","Fragment","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.a1f3585e.chunk.js","sourcesContent":["// InputFields.js\r\nimport React from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\nconst InputFields = ({ initialValues, onInputChange }) => {\r\n  const handleInputChange = (fieldName, value) => {\r\n    const numericValue = parseFloat(value); // Convert the input value to a number\r\n    const sanitizedValue = isNaN(numericValue) ? \"\" : numericValue; // Use 0 if NaN\r\n    onInputChange(fieldName, sanitizedValue);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <TextField\r\n        label=\"Initial Amount\"\r\n        type=\"number\"\r\n        variant=\"outlined\"\r\n        value={initialValues.initialAmount}\r\n        onChange={(e) => handleInputChange('initialAmount', e.target.value)}\r\n        fullWidth\r\n        margin=\"normal\"\r\n      />\r\n      <TextField\r\n        label=\"Monthly Deposit\"\r\n        type=\"number\"\r\n        variant=\"outlined\"\r\n        value={initialValues.monthlyDeposit}\r\n        onChange={(e) => handleInputChange('monthlyDeposit', e.target.value)}\r\n        fullWidth\r\n        margin=\"normal\"\r\n        helperText=\"Enter the monthly deposit\"\r\n      />\r\n      <TextField\r\n        label=\"Interest Rate (%)\"\r\n        type=\"number\"\r\n        variant=\"outlined\"\r\n        value={initialValues.interestRate}\r\n        onChange={(e) => handleInputChange('interestRate', e.target.value)}\r\n        fullWidth\r\n        margin=\"normal\"\r\n      />\r\n       <TextField\r\n        label=\"Target Monthly Interest\"\r\n        type=\"number\"\r\n        variant=\"outlined\"\r\n        value={initialValues.targetMonthlyInterestEarned}\r\n        onChange={(e) => handleInputChange('targetMonthlyInterestEarned', e.target.value)}\r\n        fullWidth\r\n        margin=\"normal\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default InputFields;\r\n","// ResultsTable.js\r\nimport React from 'react';\r\n\r\nconst ResultsTable = ({ results }) => {\r\n  return (\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>Year</th>\r\n          <th>Starting Amount</th>\r\n          <th>Yearly Deposit</th>\r\n          <th>Interest Rate (%)</th>\r\n          <th>Interest Earned</th>\r\n          <th>Monthly Interest Earned</th>\r\n          <th>Total Amount</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {results.map((result, index) => (\r\n          <tr key={index}\r\n          className={result.highlight ? 'highlighted-row' : ''}\r\n          >\r\n            <td>{result.year}</td>\r\n            <td>{result.startingAmount.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\r\n            <td>{result.monthlyDeposit.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\r\n            <td>{result.interestRate.toFixed(2)}</td>\r\n            <td>{result.interestEarned.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\r\n            <td>{result.monthlyInterestEarned.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\r\n            <td>{result.totalAmount.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\n\r\nexport default ResultsTable;\r\n\r\n","// Footer.js\r\nimport React from 'react';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer>\r\n      <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n        Created by Your Name | Financial Freedom Calculator | {new Date().getFullYear()}\r\n      </Typography>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;","// App.js\nimport React, { useState } from 'react';\nimport InputFields from './components/InputFields/InputFields';\nimport ResultsTable from './components/ResultsTable/ResultsTable';\nimport Footer from './components/MyFooter'; \nimport { CssBaseline, ThemeProvider, createTheme, Button, Typography } from '@mui/material';\nimport './App.css'; // Import styles.css\nimport './styles.css';\n\n// Create a custom Material-UI theme\nconst theme = createTheme({\n  typography: {\n    fontFamily: 'Roboto, sans-serif', // Use your chosen font\n  },\n});\n\n\n// Calculation logic function\nconst calculateResults = (initialAmount, monthlyDeposit, interestRate, targetMonthlyInterestEarned, years) => {\n  const results = [];\n\n  let totalAmount = initialAmount;\n  for (let year = 1; year <= years; year++) {\n    const interestEarned = (totalAmount * interestRate) / 100 ; // Monthly interest\n    const monthlyInterestEarned = interestEarned / 12; // Calculate monthly interest earned\n    const isTargetAchieved = monthlyInterestEarned >= targetMonthlyInterestEarned; // Calculate target achievement\n    totalAmount += monthlyDeposit * 12 + interestEarned;\n\n    results.push({\n      year,\n      startingAmount: totalAmount - (monthlyDeposit * 12 + interestEarned),\n      monthlyDeposit: monthlyDeposit*12,\n      interestRate,\n      interestEarned,\n      monthlyInterestEarned,\n      totalAmount,\n      isTargetAchieved,\n    });\n  }\n\n  return results;\n};\n\nconst App = () => {\n  const [initialValues, setInitialValues] = useState({\n    initialAmount: 1000,\n    monthlyDeposit : 100,\n    interestRate: 7,\n  });\n\n  // Event handler for input changes\n  const handleInputChange = (field, value) => {\n    setInitialValues((prevValues) => ({\n      ...prevValues,\n      [field]: parseFloat(value), // Convert to float if needed\n    }));\n  };\n\n  const [results, setResults] = useState([]);\n\n  const handleCalculate = () => {\n    const calculatedResults = calculateResults(\n      initialValues.initialAmount,\n      initialValues.monthlyDeposit ,\n      initialValues.interestRate,\n      initialValues.targetMonthlyInterestEarned,\n      50 // Number of years you want to calculate\n    );\n    \n  // Find the index of the first result that meets the condition\n  const firstTargetAchievedIndex = calculatedResults.findIndex(result => result.isTargetAchieved);\n\n  // Set the highlight flag for the first result that meets the condition\n  if (firstTargetAchievedIndex !== -1) {\n    calculatedResults[firstTargetAchievedIndex].highlight = true;\n  }\n    setResults(calculatedResults);\n  };\n\n\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div className=\"App\">\n        <div className=\"app-container\">\n          <Typography variant=\"h2\" gutterBottom className=\"title\">\n            Financial Freedom Calculator\n          </Typography>\n          <InputFields initialValues={initialValues} onInputChange={handleInputChange} />\n          <Button variant=\"contained\" onClick={handleCalculate} color=\"primary\">\n            Calculate\n          </Button>\n          {results.length > 0 && (\n            <>\n              <ResultsTable results={results} />\n            </>\n          )}\n        </div>\n      <Footer />\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}