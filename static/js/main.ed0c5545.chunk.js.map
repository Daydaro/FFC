{"version":3,"sources":["components/InputFields/InputFields.js","components/ResultsTable/ResultsTable.js","App.js","reportWebVitals.js","index.js"],"names":["InputFields","_ref","initialValues","onInputChange","handleInputChange","fieldName","value","numericValue","parseFloat","React","createElement","TextField","label","type","variant","initialAmount","onChange","e","target","fullWidth","margin","monthlyDeposit","helperText","interestRate","ResultsTable","results","map","result","index","key","year","startingAmount","toFixed","interestEarned","totalAmount","theme","createTheme","typography","fontFamily","App","_useState","useState","_useState2","_slicedToArray","setInitialValues","_useState3","_useState4","setResults","ThemeProvider","CssBaseline","className","Typography","gutterBottom","field","prevValues","_objectSpread","_defineProperty","Button","onClick","calculatedResults","years","push","calculateResults","color","length","Fragment","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.ed0c5545.chunk.js","sourcesContent":["// InputFields.js\r\nimport React from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\nconst InputFields = ({ initialValues, onInputChange }) => {\r\n  const handleInputChange = (fieldName, value) => {\r\n    const numericValue = parseFloat(value); // Convert the input value to a number\r\n    onInputChange(fieldName, numericValue);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <TextField\r\n        label=\"Initial Amount\"\r\n        type=\"number\" // Set the type to \"number\"\r\n        variant=\"outlined\"\r\n        value={initialValues.initialAmount}\r\n        onChange={(e) => handleInputChange('initialAmount', e.target.value)}\r\n        fullWidth\r\n        margin=\"normal\"\r\n      />\r\n      <TextField\r\n        label=\"Monthly Deposit\"\r\n        type=\"number\" // Set the type to \"number\"\r\n        variant=\"outlined\"\r\n        value={initialValues.monthlyDeposit}\r\n        onChange={(e) => handleInputChange('monthlyDeposit', e.target.value)}\r\n        fullWidth\r\n        margin=\"normal\"\r\n        helperText=\"Enter the monthly deposit\"\r\n      />\r\n      <TextField\r\n        label=\"Interest Rate (%)\"\r\n        type=\"number\" // Set the type to \"number\"\r\n        variant=\"outlined\"\r\n        value={initialValues.interestRate}\r\n        onChange={(e) => handleInputChange('interestRate', e.target.value)}\r\n        fullWidth\r\n        margin=\"normal\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default InputFields;\r\n","// ResultsTable.js\r\nimport React from 'react';\r\n\r\nconst ResultsTable = ({ results }) => {\r\n  return (\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>Year</th>\r\n          <th>Starting Amount</th>\r\n          <th>Yearly Deposit</th>\r\n          <th>Interest Rate (%)</th>\r\n          <th>Interest Earned</th>\r\n          <th>Total Amount</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {results.map((result, index) => (\r\n          <tr key={index}>\r\n            <td>{result.year}</td>\r\n            <td>{result.startingAmount.toFixed(2)}</td>\r\n            <td>{result.monthlyDeposit.toFixed(2)}</td>\r\n            <td>{result.interestRate.toFixed(2)}</td>\r\n            <td>{result.interestEarned.toFixed(2)}</td>\r\n            <td>{result.totalAmount.toFixed(2)}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\n\r\nexport default ResultsTable;\r\n\r\n","// App.js\nimport React, { useState } from 'react';\nimport InputFields from './components/InputFields/InputFields';\nimport ResultsTable from './components/ResultsTable/ResultsTable';\nimport { CssBaseline, ThemeProvider, createTheme, Button, Typography } from '@mui/material';\nimport './App.css'; // Import styles.css\nimport './styles.css';\n\n// Create a custom Material-UI theme\nconst theme = createTheme({\n  typography: {\n    fontFamily: 'Roboto, sans-serif', // Use your chosen font\n  },\n});\n\n\n// Calculation logic function\nconst calculateResults = (initialAmount, monthlyDeposit, interestRate, years) => {\n  const results = [];\n\n  let totalAmount = initialAmount;\n  for (let year = 1; year <= years; year++) {\n    const interestEarned = (totalAmount * interestRate) / 100 ; // Monthly interest\n    totalAmount += monthlyDeposit * 12 + interestEarned;\n\n    results.push({\n      year,\n      startingAmount: totalAmount - (monthlyDeposit * 12 + interestEarned),\n      monthlyDeposit: monthlyDeposit*12,\n      interestRate,\n      interestEarned,\n      totalAmount,\n    });\n  }\n\n  return results;\n};\n\nconst App = () => {\n  const [initialValues, setInitialValues] = useState({\n    initialAmount: 1000,\n    monthlyDeposit : 100,\n    interestRate: 7,\n  });\n\n  // Event handler for input changes\n  const handleInputChange = (field, value) => {\n    setInitialValues((prevValues) => ({\n      ...prevValues,\n      [field]: parseFloat(value), // Convert to float if needed\n    }));\n  };\n\n  const [results, setResults] = useState([]);\n\n  const handleCalculate = () => {\n    const calculatedResults = calculateResults(\n      initialValues.initialAmount,\n      initialValues.monthlyDeposit ,\n      initialValues.interestRate,\n      50 // Number of years you want to calculate\n    );\n    setResults(calculatedResults);\n  };\n\n\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div className=\"App\">\n        <div className=\"app-container\">\n          <Typography variant=\"h2\" gutterBottom className=\"title\">\n            Financial Freedom Calculator\n          </Typography>\n          <InputFields initialValues={initialValues} onInputChange={handleInputChange} />\n          <Button variant=\"contained\" onClick={handleCalculate} color=\"primary\">\n            Calculate\n          </Button>\n          {results.length > 0 && (\n            <>\n              <ResultsTable results={results} />\n            </>\n          )}\n        </div>\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}